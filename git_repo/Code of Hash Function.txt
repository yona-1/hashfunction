Code of Hash Function
import hashlib
import os
from typing import Tuple

class HashingUtility:
    def _init_(self, algorithm: str = 'sha256'):
        self.algorithm = algorithm.lower()

    def hash_string(self, input_string: str, salt: bytes = None) -> Tuple[str, bytes]:
        if not salt:
            salt = os.urandom(16)  # Generate a random 16-byte salt

        hash_obj = hashlib.new(self.algorithm)
        hash_obj.update(salt + input_string.encode('utf-8'))
        hash_digest = hash_obj.hexdigest()
        
        return hash_digest, salt

    def verify_hash(self, input_string: str, stored_hash: str, salt: bytes) -> bool:
        hash_obj = hashlib.new(self.algorithm)
        hash_obj.update(salt + input_string.encode('utf-8'))
        computed_hash = hash_obj.hexdigest()

        return computed_hash == stored_hash

    def get_supported_algorithms(self) -> list:
        return hashlib.algorithms_available

def main():
    print("Supported hash algorithms: ", hashlib.algorithms_available)
    algo = input("Enter the hash algorithm you want to use (default is sha256): ").strip().lower() or 'sha256'
    
    if algo not in hashlib.algorithms_available:
        print("Unsupported algorithm. Falling back to sha256.")
        algo = 'sha256'

    hasher = HashingUtility(algorithm=algo)
    input_string = input("Enter the string to be hashed: ")
    hashed_string, salt = hasher.hash_string(input_string)

    print(f"\nOriginal string: {input_string}")
    print(f"Hashed string: {hashed_string}")
    print(f"Salt (in hex): {salt.hex()}")

    # Verify the hash
    verification_input = input("\nEnter the string again to verify: ")
    if hasher.verify_hash(verification_input, hashed_string, salt):
        print("The hashes match. Verification successful.")
    else:
        print("The hashes do not match. Verification failed.")

if _name_ == "_main_":
    main()